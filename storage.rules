rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        request.auth.token.admin == true;
    }
    
    function isValidImage() {
      return request.resource.contentType.matches('image/.*') &&
        request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }
    
    function isValidVideo() {
      return request.resource.contentType.matches('video/.*') &&
        request.resource.size < 100 * 1024 * 1024; // 100MB limit
    }
    
    function isValidDocument() {
      return request.resource.contentType.matches('application/pdf') &&
        request.resource.size < 20 * 1024 * 1024; // 20MB limit
    }
    
    // Public project assets
    match /projects/{projectId}/{allPaths=**} {
      allow read: if true;
      allow write: if isAdmin() && 
        (isValidImage() || isValidVideo());
    }
    
    // User uploads (profile pictures, etc.)
    match /users/{userId}/{allPaths=**} {
      allow read: if true;
      allow write: if isAuthenticated() && 
        request.auth.uid == userId && 
        isValidImage();
    }
    
    // Blog post images
    match /blog/{postId}/{allPaths=**} {
      allow read: if true;
      allow write: if isAdmin() && isValidImage();
    }
    
    // Client project files (private)
    match /client-files/{projectId}/{allPaths=**} {
      allow read: if isAuthenticated() &&
        (isAdmin() || request.auth.uid in resource.metadata.clientIds);
      allow write: if isAdmin() &&
        (isValidDocument() || isValidImage());
    }
    
    // Temporary uploads (for processing)
    match /temp/{userId}/{allPaths=**} {
      allow read, write: if isAuthenticated() && 
        request.auth.uid == userId;
    }
  }
}